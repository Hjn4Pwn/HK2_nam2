
./data/process_data_1/7/function_overwrite_O2_gcc:     file format elf64-x86-64


Disassembly of section .init:

0000000000001000 <_init>:
    1000:	endbr64 
    1004:	sub    rsp,0x8
    1008:	mov    rax,QWORD PTR [rip+0x2fd9]        # 3fe8 <__gmon_start__@Base>
    100f:	test   rax,rax
    1012:	je     1016 <_init+0x16>
    1014:	call   rax
    1016:	add    rsp,0x8
    101a:	ret    

Disassembly of section .plt:

0000000000001020 <.plt>:
    1020:	push   QWORD PTR [rip+0x2f4a]        # 3f70 <_GLOBAL_OFFSET_TABLE_+0x8>
    1026:	bnd jmp QWORD PTR [rip+0x2f4b]        # 3f78 <_GLOBAL_OFFSET_TABLE_+0x10>
    102d:	nop    DWORD PTR [rax]
    1030:	endbr64 
    1034:	push   0x0
    1039:	bnd jmp 1020 <_init+0x20>
    103f:	nop
    1040:	endbr64 
    1044:	push   0x1
    1049:	bnd jmp 1020 <_init+0x20>
    104f:	nop
    1050:	endbr64 
    1054:	push   0x2
    1059:	bnd jmp 1020 <_init+0x20>
    105f:	nop
    1060:	endbr64 
    1064:	push   0x3
    1069:	bnd jmp 1020 <_init+0x20>
    106f:	nop
    1070:	endbr64 
    1074:	push   0x4
    1079:	bnd jmp 1020 <_init+0x20>
    107f:	nop
    1080:	endbr64 
    1084:	push   0x5
    1089:	bnd jmp 1020 <_init+0x20>
    108f:	nop
    1090:	endbr64 
    1094:	push   0x6
    1099:	bnd jmp 1020 <_init+0x20>
    109f:	nop
    10a0:	endbr64 
    10a4:	push   0x7
    10a9:	bnd jmp 1020 <_init+0x20>
    10af:	nop
    10b0:	endbr64 
    10b4:	push   0x8
    10b9:	bnd jmp 1020 <_init+0x20>
    10bf:	nop
    10c0:	endbr64 
    10c4:	push   0x9
    10c9:	bnd jmp 1020 <_init+0x20>
    10cf:	nop
    10d0:	endbr64 
    10d4:	push   0xa
    10d9:	bnd jmp 1020 <_init+0x20>
    10df:	nop

Disassembly of section .plt.got:

00000000000010e0 <__cxa_finalize@plt>:
    10e0:	endbr64 
    10e4:	bnd jmp QWORD PTR [rip+0x2f0d]        # 3ff8 <__cxa_finalize@GLIBC_2.2.5>
    10eb:	nop    DWORD PTR [rax+rax*1+0x0]

Disassembly of section .plt.sec:

00000000000010f0 <puts@plt>:
    10f0:	endbr64 
    10f4:	bnd jmp QWORD PTR [rip+0x2e85]        # 3f80 <puts@GLIBC_2.2.5>
    10fb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001100 <strlen@plt>:
    1100:	endbr64 
    1104:	bnd jmp QWORD PTR [rip+0x2e7d]        # 3f88 <strlen@GLIBC_2.2.5>
    110b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001110 <__stack_chk_fail@plt>:
    1110:	endbr64 
    1114:	bnd jmp QWORD PTR [rip+0x2e75]        # 3f90 <__stack_chk_fail@GLIBC_2.4>
    111b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001120 <setresgid@plt>:
    1120:	endbr64 
    1124:	bnd jmp QWORD PTR [rip+0x2e6d]        # 3f98 <setresgid@GLIBC_2.2.5>
    112b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001130 <fgets@plt>:
    1130:	endbr64 
    1134:	bnd jmp QWORD PTR [rip+0x2e65]        # 3fa0 <fgets@GLIBC_2.2.5>
    113b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001140 <getegid@plt>:
    1140:	endbr64 
    1144:	bnd jmp QWORD PTR [rip+0x2e5d]        # 3fa8 <getegid@GLIBC_2.2.5>
    114b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001150 <__printf_chk@plt>:
    1150:	endbr64 
    1154:	bnd jmp QWORD PTR [rip+0x2e55]        # 3fb0 <__printf_chk@GLIBC_2.3.4>
    115b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001160 <setvbuf@plt>:
    1160:	endbr64 
    1164:	bnd jmp QWORD PTR [rip+0x2e4d]        # 3fb8 <setvbuf@GLIBC_2.2.5>
    116b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001170 <fopen@plt>:
    1170:	endbr64 
    1174:	bnd jmp QWORD PTR [rip+0x2e45]        # 3fc0 <fopen@GLIBC_2.2.5>
    117b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001180 <__isoc99_scanf@plt>:
    1180:	endbr64 
    1184:	bnd jmp QWORD PTR [rip+0x2e3d]        # 3fc8 <__isoc99_scanf@GLIBC_2.7>
    118b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001190 <exit@plt>:
    1190:	endbr64 
    1194:	bnd jmp QWORD PTR [rip+0x2e35]        # 3fd0 <exit@GLIBC_2.2.5>
    119b:	nop    DWORD PTR [rax+rax*1+0x0]

Disassembly of section .text:

00000000000011a0 <main>:
    11a0:	endbr64 
    11a4:	sub    rsp,0x8
    11a8:	mov    rdi,QWORD PTR [rip+0x2e71]        # 4020 <stdout@GLIBC_2.2.5>
    11af:	xor    ecx,ecx
    11b1:	xor    esi,esi
    11b3:	mov    edx,0x2
    11b8:	call   1160 <setvbuf@plt>
    11bd:	call   1140 <getegid@plt>
    11c2:	mov    edi,eax
    11c4:	mov    edx,eax
    11c6:	mov    esi,eax
    11c8:	xor    eax,eax
    11ca:	call   1120 <setresgid@plt>
    11cf:	xor    eax,eax
    11d1:	call   1520 <vuln>
    11d6:	xor    eax,eax
    11d8:	add    rsp,0x8
    11dc:	ret    
    11dd:	nop    DWORD PTR [rax]

00000000000011e0 <_start>:
    11e0:	endbr64 
    11e4:	xor    ebp,ebp
    11e6:	mov    r9,rdx
    11e9:	pop    rsi
    11ea:	mov    rdx,rsp
    11ed:	and    rsp,0xfffffffffffffff0
    11f1:	push   rax
    11f2:	push   rsp
    11f3:	xor    r8d,r8d
    11f6:	xor    ecx,ecx
    11f8:	lea    rdi,[rip+0xffffffffffffffa1]        # 11a0 <main>
    11ff:	call   QWORD PTR [rip+0x2dd3]        # 3fd8 <__libc_start_main@GLIBC_2.34>
    1205:	hlt    
    1206:	cs nop WORD PTR [rax+rax*1+0x0]

0000000000001210 <deregister_tm_clones>:
    1210:	lea    rdi,[rip+0x2e01]        # 4018 <__TMC_END__>
    1217:	lea    rax,[rip+0x2dfa]        # 4018 <__TMC_END__>
    121e:	cmp    rax,rdi
    1221:	je     1238 <deregister_tm_clones+0x28>
    1223:	mov    rax,QWORD PTR [rip+0x2db6]        # 3fe0 <_ITM_deregisterTMCloneTable@Base>
    122a:	test   rax,rax
    122d:	je     1238 <deregister_tm_clones+0x28>
    122f:	jmp    rax
    1231:	nop    DWORD PTR [rax+0x0]
    1238:	ret    
    1239:	nop    DWORD PTR [rax+0x0]

0000000000001240 <register_tm_clones>:
    1240:	lea    rdi,[rip+0x2dd1]        # 4018 <__TMC_END__>
    1247:	lea    rsi,[rip+0x2dca]        # 4018 <__TMC_END__>
    124e:	sub    rsi,rdi
    1251:	mov    rax,rsi
    1254:	shr    rsi,0x3f
    1258:	sar    rax,0x3
    125c:	add    rsi,rax
    125f:	sar    rsi,1
    1262:	je     1278 <register_tm_clones+0x38>
    1264:	mov    rax,QWORD PTR [rip+0x2d85]        # 3ff0 <_ITM_registerTMCloneTable@Base>
    126b:	test   rax,rax
    126e:	je     1278 <register_tm_clones+0x38>
    1270:	jmp    rax
    1272:	nop    WORD PTR [rax+rax*1+0x0]
    1278:	ret    
    1279:	nop    DWORD PTR [rax+0x0]

0000000000001280 <__do_global_dtors_aux>:
    1280:	endbr64 
    1284:	cmp    BYTE PTR [rip+0x2d9d],0x0        # 4028 <completed.0>
    128b:	jne    12b8 <__do_global_dtors_aux+0x38>
    128d:	push   rbp
    128e:	cmp    QWORD PTR [rip+0x2d62],0x0        # 3ff8 <__cxa_finalize@GLIBC_2.2.5>
    1296:	mov    rbp,rsp
    1299:	je     12a7 <__do_global_dtors_aux+0x27>
    129b:	mov    rdi,QWORD PTR [rip+0x2d66]        # 4008 <__dso_handle>
    12a2:	call   10e0 <__cxa_finalize@plt>
    12a7:	call   1210 <deregister_tm_clones>
    12ac:	mov    BYTE PTR [rip+0x2d75],0x1        # 4028 <completed.0>
    12b3:	pop    rbp
    12b4:	ret    
    12b5:	nop    DWORD PTR [rax]
    12b8:	ret    
    12b9:	nop    DWORD PTR [rax+0x0]

00000000000012c0 <frame_dummy>:
    12c0:	endbr64 
    12c4:	jmp    1240 <register_tm_clones>
    12c9:	nop    DWORD PTR [rax+0x0]

00000000000012d0 <hard_checker>:
    12d0:	endbr64 
    12d4:	push   rbp
    12d5:	sub    rsp,0x50
    12d9:	mov    rax,QWORD PTR fs:0x28
    12e2:	mov    QWORD PTR [rsp+0x48],rax
    12e7:	xor    eax,eax
    12e9:	test   rsi,rsi
    12ec:	je     130d <hard_checker+0x3d>
    12ee:	add    rsi,rdi
    12f1:	nop    DWORD PTR [rax+0x0]
    12f8:	movsx  edx,BYTE PTR [rdi]
    12fb:	add    rdi,0x1
    12ff:	add    eax,edx
    1301:	cmp    rdi,rsi
    1304:	jne    12f8 <hard_checker+0x28>
    1306:	cmp    eax,0xcc07c9
    130b:	je     1340 <hard_checker+0x70>
    130d:	mov    rax,QWORD PTR [rsp+0x48]
    1312:	sub    rax,QWORD PTR fs:0x28
    131b:	jne    13d4 <hard_checker+0x104>
    1321:	add    rsp,0x50
    1325:	lea    rsi,[rip+0xcfe]        # 202a <_IO_stdin_used+0x2a>
    132c:	mov    edi,0x1
    1331:	xor    eax,eax
    1333:	pop    rbp
    1334:	jmp    1150 <__printf_chk@plt>
    1339:	nop    DWORD PTR [rax+0x0]
    1340:	pxor   xmm0,xmm0
    1344:	lea    rsi,[rip+0xcb9]        # 2004 <_IO_stdin_used+0x4>
    134b:	lea    rdi,[rip+0xcb4]        # 2006 <_IO_stdin_used+0x6>
    1352:	movaps XMMWORD PTR [rsp],xmm0
    1356:	movaps XMMWORD PTR [rsp+0x10],xmm0
    135b:	movaps XMMWORD PTR [rsp+0x20],xmm0
    1360:	movaps XMMWORD PTR [rsp+0x30],xmm0
    1365:	call   1170 <fopen@plt>
    136a:	mov    rdx,rax
    136d:	test   rax,rax
    1370:	je     13ac <hard_checker+0xdc>
    1372:	mov    rbp,rsp
    1375:	mov    esi,0x40
    137a:	mov    rdi,rbp
    137d:	call   1130 <fgets@plt>
    1382:	lea    rdi,[rip+0xd1f]        # 20a8 <_IO_stdin_used+0xa8>
    1389:	call   10f0 <puts@plt>
    138e:	mov    rdi,rbp
    1391:	call   10f0 <puts@plt>
    1396:	mov    rax,QWORD PTR [rsp+0x48]
    139b:	sub    rax,QWORD PTR fs:0x28
    13a4:	jne    13d4 <hard_checker+0x104>
    13a6:	add    rsp,0x50
    13aa:	pop    rbp
    13ab:	ret    
    13ac:	mov    edi,0x1
    13b1:	lea    rcx,[rip+0xc57]        # 200f <_IO_stdin_used+0xf>
    13b8:	lea    rdx,[rip+0xcb1]        # 2070 <_IO_stdin_used+0x70>
    13bf:	xor    eax,eax
    13c1:	lea    rsi,[rip+0xc5c]        # 2024 <_IO_stdin_used+0x24>
    13c8:	call   1150 <__printf_chk@plt>
    13cd:	xor    edi,edi
    13cf:	call   1190 <exit@plt>
    13d4:	call   1110 <__stack_chk_fail@plt>
    13d9:	nop    DWORD PTR [rax+0x0]

00000000000013e0 <calculate_story_score>:
    13e0:	endbr64 
    13e4:	test   rsi,rsi
    13e7:	je     1400 <calculate_story_score+0x20>
    13e9:	add    rsi,rdi
    13ec:	xor    eax,eax
    13ee:	xchg   ax,ax
    13f0:	movsx  edx,BYTE PTR [rdi]
    13f3:	add    rdi,0x1
    13f7:	add    eax,edx
    13f9:	cmp    rdi,rsi
    13fc:	jne    13f0 <calculate_story_score+0x10>
    13fe:	ret    
    13ff:	nop
    1400:	xor    eax,eax
    1402:	ret    
    1403:	data16 cs nop WORD PTR [rax+rax*1+0x0]
    140e:	xchg   ax,ax

0000000000001410 <easy_checker>:
    1410:	endbr64 
    1414:	push   rbp
    1415:	sub    rsp,0x50
    1419:	mov    rax,QWORD PTR fs:0x28
    1422:	mov    QWORD PTR [rsp+0x48],rax
    1427:	xor    eax,eax
    1429:	test   rsi,rsi
    142c:	je     144d <easy_checker+0x3d>
    142e:	add    rsi,rdi
    1431:	nop    DWORD PTR [rax+0x0]
    1438:	movsx  edx,BYTE PTR [rdi]
    143b:	add    rdi,0x1
    143f:	add    eax,edx
    1441:	cmp    rdi,rsi
    1444:	jne    1438 <easy_checker+0x28>
    1446:	cmp    eax,0x539
    144b:	je     1480 <easy_checker+0x70>
    144d:	mov    rax,QWORD PTR [rsp+0x48]
    1452:	sub    rax,QWORD PTR fs:0x28
    145b:	jne    1514 <easy_checker+0x104>
    1461:	add    rsp,0x50
    1465:	lea    rsi,[rip+0xbbe]        # 202a <_IO_stdin_used+0x2a>
    146c:	mov    edi,0x1
    1471:	xor    eax,eax
    1473:	pop    rbp
    1474:	jmp    1150 <__printf_chk@plt>
    1479:	nop    DWORD PTR [rax+0x0]
    1480:	pxor   xmm0,xmm0
    1484:	lea    rsi,[rip+0xb79]        # 2004 <_IO_stdin_used+0x4>
    148b:	lea    rdi,[rip+0xb74]        # 2006 <_IO_stdin_used+0x6>
    1492:	movaps XMMWORD PTR [rsp],xmm0
    1496:	movaps XMMWORD PTR [rsp+0x10],xmm0
    149b:	movaps XMMWORD PTR [rsp+0x20],xmm0
    14a0:	movaps XMMWORD PTR [rsp+0x30],xmm0
    14a5:	call   1170 <fopen@plt>
    14aa:	mov    rdx,rax
    14ad:	test   rax,rax
    14b0:	je     14ec <easy_checker+0xdc>
    14b2:	mov    rbp,rsp
    14b5:	mov    esi,0x40
    14ba:	mov    rdi,rbp
    14bd:	call   1130 <fgets@plt>
    14c2:	lea    rdi,[rip+0xb7b]        # 2044 <_IO_stdin_used+0x44>
    14c9:	call   10f0 <puts@plt>
    14ce:	mov    rdi,rbp
    14d1:	call   10f0 <puts@plt>
    14d6:	mov    rax,QWORD PTR [rsp+0x48]
    14db:	sub    rax,QWORD PTR fs:0x28
    14e4:	jne    1514 <easy_checker+0x104>
    14e6:	add    rsp,0x50
    14ea:	pop    rbp
    14eb:	ret    
    14ec:	mov    edi,0x1
    14f1:	lea    rcx,[rip+0xb17]        # 200f <_IO_stdin_used+0xf>
    14f8:	lea    rdx,[rip+0xb71]        # 2070 <_IO_stdin_used+0x70>
    14ff:	xor    eax,eax
    1501:	lea    rsi,[rip+0xb1c]        # 2024 <_IO_stdin_used+0x24>
    1508:	call   1150 <__printf_chk@plt>
    150d:	xor    edi,edi
    150f:	call   1190 <exit@plt>
    1514:	call   1110 <__stack_chk_fail@plt>
    1519:	nop    DWORD PTR [rax+0x0]

0000000000001520 <vuln>:
    1520:	endbr64 
    1524:	push   rbp
    1525:	lea    rsi,[rip+0xba4]        # 20d0 <_IO_stdin_used+0xd0>
    152c:	mov    edi,0x1
    1531:	sub    rsp,0xa0
    1538:	mov    rax,QWORD PTR fs:0x28
    1541:	mov    QWORD PTR [rsp+0x98],rax
    1549:	xor    eax,eax
    154b:	lea    rbp,[rsp+0x10]
    1550:	call   1150 <__printf_chk@plt>
    1555:	mov    rsi,rbp
    1558:	lea    rdi,[rip+0xb03]        # 2062 <_IO_stdin_used+0x62>
    155f:	xor    eax,eax
    1561:	call   1180 <__isoc99_scanf@plt>
    1566:	lea    rdi,[rip+0xba3]        # 2110 <_IO_stdin_used+0x110>
    156d:	call   10f0 <puts@plt>
    1572:	lea    rdx,[rsp+0xc]
    1577:	lea    rsi,[rsp+0x8]
    157c:	xor    eax,eax
    157e:	lea    rdi,[rip+0xae3]        # 2068 <_IO_stdin_used+0x68>
    1585:	call   1180 <__isoc99_scanf@plt>
    158a:	movsxd rax,DWORD PTR [rsp+0x8]
    158f:	cmp    eax,0x9
    1592:	jg     15a2 <vuln+0x82>
    1594:	lea    rdx,[rip+0x2aa5]        # 4040 <fun>
    159b:	mov    ecx,DWORD PTR [rsp+0xc]
    159f:	add    DWORD PTR [rdx+rax*4],ecx
    15a2:	mov    rdi,rbp
    15a5:	call   1100 <strlen@plt>
    15aa:	mov    rdi,rbp
    15ad:	mov    rsi,rax
    15b0:	call   QWORD PTR [rip+0x2a5a]        # 4010 <check>
    15b6:	mov    rax,QWORD PTR [rsp+0x98]
    15be:	sub    rax,QWORD PTR fs:0x28
    15c7:	jne    15d2 <vuln+0xb2>
    15c9:	add    rsp,0xa0
    15d0:	pop    rbp
    15d1:	ret    
    15d2:	call   1110 <__stack_chk_fail@plt>

Disassembly of section .fini:

00000000000015d8 <_fini>:
    15d8:	endbr64 
    15dc:	sub    rsp,0x8
    15e0:	add    rsp,0x8
    15e4:	ret    
